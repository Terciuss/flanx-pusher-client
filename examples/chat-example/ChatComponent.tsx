import React, { useState, useEffect, useCallback, useRef } from 'react';
import { ChatService } from './ChatService';
import { ChatMessage, User, MessagesLoadEvent, MessageReadEvent, UserTypingEvent, INativeMessage } from './types';

interface ChatComponentProps {
  chatId: string;
  user: User;
  wsUrl: string;
  addNotification: (notification: {
    title: string;
    message: string;
    type: 'error' | 'success' | 'warning';
  }) => void;
}

export const ChatComponent: React.FC<ChatComponentProps> = ({
  chatId,
  user,
  wsUrl,
  addNotification
}) => {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [isTyping, setIsTyping] = useState(false);
  const [typingUsers, setTypingUsers] = useState<string[]>([]);
  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const chatService = new ChatService(wsUrl);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑ (–∑–∞–≥–ª—É—à–∫–∞)
  const scrollToBottom = useCallback(() => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω–∏–∑
    console.log('Scrolling to bottom');
  }, []);

  const messagesLoad = useCallback(({ data: messages }: MessagesLoadEvent) => {
    setMessages(prev => [...(messages || [] as ChatMessage[]), ...prev]);
    scrollToBottom();
  }, [scrollToBottom]);

  const messageSent = useCallback(({ data: message }: INativeMessage<ChatMessage>) => {
    if (String(message?.chat_id) === chatId) {
      setMessages(prev => [...prev, message as ChatMessage]);
      scrollToBottom();
    }
  }, [chatId, scrollToBottom]);

  const messageRead = useCallback((message: MessageReadEvent) => {
    if (String(message.chat_id) === chatId) {
      setMessages(prev => prev.map(msg => msg.id === message.message_id ? {
        ...msg,
        status: 'read' as const
      } : msg));
    }
  }, [chatId]);

  const userTyping = useCallback((event: UserTypingEvent) => {
    if (String(event.chat_id) === chatId && event.user_id !== user?.id) {
      if (event.is_typing) {
        setTypingUsers(prev => {
          if (!prev.includes(event.user_name)) {
            return [...prev, event.user_name];
          }
          return prev;
        });
      } else {
        setTypingUsers(prev => prev.filter(name => name !== event.user_name));
      }
    }
  }, [chatId, user?.id]);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
  const setupEventListeners = () => {
    chatService.onMessagesLoad(messagesLoad);
    // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    chatService.onMessageSent(messageSent);
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç
    chatService.onUserTyping(userTyping);
    // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
    chatService.onMessageRead(messageRead);
  };

  // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
  const cleanupEventListeners = () => {
    chatService.offMessagesLoad(messagesLoad);
    chatService.offMessageSent(messageSent);
    chatService.offUserTyping(userTyping);
    chatService.offMessageRead(messageRead);
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  useEffect(() => {
    const connectToWebSocket = async () => {
      try {
        await chatService.connectToWebSocket();
        setIsConnected(true);
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —á–∞—Ç
        chatService.subscribeToChat(Number(chatId));
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        setupEventListeners();

        console.log('chats load');
        chatService.chatsLoad();

        chatService.messagesLoad(Number(chatId));

      } catch (error) {
        console.error('Failed to connect to WebSocket:', error);
        addNotification({
          title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —á–∞—Ç—É',
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É',
          type: 'error',
        });
      } finally {
        setIsLoading(false);
      }
    };

    connectToWebSocket();

    return () => {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —á–∞—Ç–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      chatService.unsubscribeFromChat(Number(chatId));
      cleanupEventListeners();
    };
  }, [chatId]);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = async () => {
    if (!newMessage.trim() || !isConnected) return;

    try {
      chatService.sendMessage(Number(chatId), newMessage);
      chatService.sendTypingEvent(Number(chatId), false);

      setNewMessage('');
      scrollToBottom();

    } catch (error) {
      console.error('Failed to send message:', error);
      addNotification({
        title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
        type: 'error',
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
  const handleTyping = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewMessage(e.target.value);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    if (!isTyping) {
      setIsTyping(true);
      chatService.sendTypingEvent(Number(chatId), true);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ü–∏—é –Ω–∞–±–æ—Ä–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    typingTimeoutRef.current = setTimeout(() => {
      setIsTyping(false);
      chatService.sendTypingEvent(Number(chatId), false);
    }, 2000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</div>;
  }

  return (
    <div className="chat-container">
      <div className="chat-header">
        <h3>–ß–∞—Ç #{chatId}</h3>
        <div className="connection-status">
          {isConnected ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
        </div>
      </div>

      <div className="chat-messages">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`message ${message.user_id === user.id ? 'own' : 'other'}`}
          >
            <div className="message-header">
              <span className="user-name">{message.user_name}</span>
              <span className="timestamp">{new Date(message.timestamp).toLocaleTimeString()}</span>
            </div>
            <div className="message-content">{message.message}</div>
            <div className="message-status">{message.status}</div>
          </div>
        ))}
        
        {typingUsers.length > 0 && (
          <div className="typing-indicator">
            {typingUsers.join(', ')} –ø–µ—á–∞—Ç–∞–µ—Ç...
          </div>
        )}
      </div>

      <div className="chat-input">
        <input
          type="text"
          value={newMessage}
          onChange={handleTyping}
          onKeyPress={handleKeyPress}
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          disabled={!isConnected}
        />
        <button onClick={sendMessage} disabled={!isConnected || !newMessage.trim()}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>
      </div>
    </div>
  );
}; 